datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


model Store {
  id String @id @default(uuid())
  name String
  userId String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  size Size[] @relation("StoreToSize")
  color Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  pickuplocations PickUpLocation[] @relation("StoreToPickUpLocation")
  transactions Transaction[] @relation("StoreToTransact")

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([storeId], name: "idx_storeId")
}

model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  name String
  products Product[] @relation("CategoryToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields: [storeId], references: [id])
  name String
  value String
  authorName String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}
model Color {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor", fields: [storeId], references: [id])
  name String
  value String
  products Product []
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name String
  price Decimal
  description String @db.Text
  condition String
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation( fields: [sizeId], references : [id])
  colorId String
  color Color @relation( fields: [colorId], references : [id])
  images Image []
  orderItems OrderItem []
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}


model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields:[productId], references:[id], onDelete: Cascade)

  url String
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  @@index([productId])
 
}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields:[storeId], references:[id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields:[orderId], references:[id])
  productId String
  product Product @relation( fields:[productId], references:[id])
  pickuplocation PickUpLocation[]
  @@index([orderId])
  @@index([productId])
}

model PickUpLocation {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToPickUpLocation", fields:[storeId], references:[id])
  address String
  contact String   // This could be a phone number or email address
  instructions String @db.Text// Specific instructions or landmarks
  operatingHours String @db.Text // Hours during which pickups are available
  parkingInformation String @db.Text // Details about parking availability
  confirmationDetails String @db.Text // Any confirmation or identification requirements
  imageUrl String
  
  orderItem OrderItem []
 
  @@index([storeId], name: "idx_storeId")

  
}

model Transaction {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToTransact", fields:[storeId], references:[id])
  merchantRequestId String
  checkoutRequestId String
  resultCode Int
  resultDesc String
  amount Int
  mpesaReceiptNumber String
  balance Int
  transactionDate DateTime 
  phoneNumber Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}
